


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 AREA             datos, DATA
    3 00000000         
    4 00000000 00000003 
                       N       EQU              3
    5 00000000 00000009 
                       Tamanio EQU              N*N
    6 00000000         ;Test_A   DCD 1,0,0,0,1,0,0,0,1
    7 00000000         ;Test_B   DCD 9,8,7,6,5,4,3,2,1
    8 00000000         ;Resultado  SPACE N*N*4
    9 00000000         
   10 00000000                 AREA             codigo,CODE
   11 00000000         
   12 00000000                 EXPORT           matriz3x3_operar_ARM_C
   13 00000000                 EXPORT           matriz3x3_operar_ARM
   14 00000000                 IMPORT           matrizNxN_multiplicar_C
   15 00000000         
   16 00000000                 PRESERVE8        {TRUE}
   17 00000000         
   18 00000000         
   19 00000000         
   20 00000000         matriz3x3_operar_ARM_C
   21 00000000         
   22 00000000 E1A0C00D        MOV              IP, SP      ;PROLOGO
   23 00000004 E92DDFF0        STMDB            SP!, {r4-r10,FP,IP,LR,PC}
   24 00000008 E24CB004        SUB              FP, IP, #4
   25 0000000C E24DD06C        SUB              SP, #108    ;Hacemos espacio en
                                                             la pila para las v
                                                            ariables locales, 2
                                                             matrices 3x3 108=9
                                                            *4*3
   26 00000010         ; r0 = Test_A
   27 00000010         ; r1 = Test_B
   28 00000010         ; r2 = Test_C
   29 00000010         ; r3 = Test_D 
   30 00000010         
   31 00000010         ;SALVAGUARDA DE LAS MEMORIAS DE LAS MATRICES Y MULTIPLIC
                       ACIÃ“N DE A*B
   32 00000010         
   33 00000010 E1A04000        MOV              r4,r0       ; r4 = @Test_a
   34 00000014 E1A05001        MOV              r5,r1       ; r5 = @Test_b
   35 00000018 E1A06002        MOV              r6,r2       ; r6 = @Test_c
   36 0000001C E1A07003        MOV              r7,r3       ; r7 = @Test_d
   37 00000020 E59C9000        LDR              r9,[IP]     ; r9 = IP = @Result
                                                            ados_E
   38 00000024         
   39 00000024 E1A0200D        MOV              r2,SP       ; r2 =@AB r2 apunta
                                                             a la memoria que h
                                                            emos hecho para las
                                                             variables locales,
                                                             en concreto a dond
                                                            e apunta sp
   40 00000028         
   41 00000028         
   42 00000028 EBFFFFFE        bl               matrizNxN_multiplicar_C
   43 0000002C         
   44 0000002C         ;RECORDATORIO Resultado en SP(AB)
   45 0000002C         
   46 0000002C         ;PONEMOS LOS PARAMETROS PARA LLAMAR A MULTPLICAR_C OTRA 



ARM Macro Assembler    Page 2 


                       VEZ PARA HACER C*D
   47 0000002C         
   48 0000002C E1A00006        mov              r0,r6       ; r0 = @Test_c
   49 00000030 E1A01007        mov              r1,r7       ; r1 = @Test_d
   50 00000034 E28D2024        ADD              r2,SP,#36   ; r2 =@CD r2 apunta
                                                             a la memoria que h
                                                            emos hecho para las
                                                             variables locales,
                                                             en concreto a dond
                                                            e apunta sp+36 que 
                                                            lo que AB
   51 00000038         
   52 00000038 EBFFFFFE        bl               matrizNxN_multiplicar_C
   53 0000003C         
   54 0000003C         ;RECORDATORIO Resultado en SP+36(CD)
   55 0000003C         ;A PARTIR DE AQUI PODRIAMOS HACER USO DE R4-R7 YA QUE YA
                        NO NECESITAMOS LAS MATRICES ORIGINALES
   56 0000003C         
   57 0000003C         ;TRASPUESTA CD
   58 0000003C E28D0024        add              r0,SP,#36   ; r0 = @CD
   59 00000040 E28D1048        add              r1,SP,#72   ; r1 = @Traspuesta
   60 00000044         
   61 00000044 EB00002D        bl               Trasponer
   62 00000048         
   63 00000048         ;RECORDATORIO Resultado en SP+72(CD TRASPUESTA)
   64 00000048         
   65 00000048         ;SUMA AB + CD traspuesta
   66 00000048 E3A00000        mov              r0,#0
   67 0000004C E3A04009        LDR              r4,=Tamanio ; r4 = N
   68 00000050 E1A0500D        mov              r5,SP       ; r5 = AB
   69 00000054 E28D6048        add              r6,SP,#72   ; r6 = CD traspuest
                                                            a
   70 00000058         
   71 00000058 E2544001 
                       suma    subs             r4,r4,#1    ; r4(N)--
   72 0000005C 4A000006        bmi              fin_suma
   73 00000060 E7957104        ldr              r7,[r5,r4,LSL #2] ; r7 = AB[r4]
                                                            
   74 00000064 E7968104        ldr              r8,[r6,r4,LSL #2] ; r8 = CD[r4]
                                                            
   75 00000068 E0888007        add              r8,r8,r7    ; r8=r8+r7
   76 0000006C E3580000        cmp              r8,#0
   77 00000070 12800001        addne            r0,r0,#1    ; r0++ = terminos n
                                                            o cero++
   78 00000074 E7898104        str              r8,[r9,r4,LSL #2] ; Resultado_E
                                                            [r4] = r8
   79 00000078 EAFFFFF6        b                suma
   80 0000007C         fin_suma
   81 0000007C         
   82 0000007C         ;RESULTADOS NO CERO
   83 0000007C         
   84 0000007C         
   85 0000007C E91BAFF0        LDMDB            FP, {r4-r10,FP,SP,PC}
   86 00000080         
   87 00000080         
   88 00000080         
   89 00000080         matriz3x3_operar_ARM
   90 00000080         
   91 00000080 E1A0C00D        MOV              IP, SP      ;PROLOGO



ARM Macro Assembler    Page 3 


   92 00000084 E92DDFF0        STMDB            SP!, {r4-r10,FP,IP,LR,PC}
   93 00000088 E24CB004        SUB              FP, IP, #4
   94 0000008C E24DD06C        SUB              SP, #108    ;Hacemos espacio en
                                                             la pila para las v
                                                            ariables locales, 2
                                                             matrices 3x3 108=9
                                                            *4*3
   95 00000090         
   96 00000090         
   97 00000090         
   98 00000090 E1A04000        MOV              r4,r0       ; r4 = @Test_a
   99 00000094 E1A05001        MOV              r5,r1       ; r5 = @Test_b
  100 00000098 E1A06002        MOV              r6,r2       ; r6 = @Test_c
  101 0000009C E1A07003        MOV              r7,r3       ; r7 = @Test_d
  102 000000A0 E59C9000        LDR              r9,[IP]     ; r9 = IP = @Result
                                                            ados_E
  103 000000A4         
  104 000000A4 E1A0200D        MOV              r2,SP       ; r2 =@AB r2 apunta
                                                             a la memoria que h
                                                            emos hecho para las
                                                             variables locales,
                                                             en concreto a dond
                                                            e apunta sp
  105 000000A8         
  106 000000A8         
  107 000000A8 EB000026        bl               matrizNxN_multiplicar
  108 000000AC         
  109 000000AC         ;RECORDATORIO Resultado en SP(AB)
  110 000000AC         
  111 000000AC         ;PONEMOS LOS PARAMETROS PARA LLAMAR A MULTPLICAR_C OTRA 
                       VEZ PARA HACER C*D
  112 000000AC         
  113 000000AC E1A00006        mov              r0,r6       ; r0 = @Test_c
  114 000000B0 E1A01007        mov              r1,r7       ; r1 = @Test_d
  115 000000B4 E28D2024        ADD              r2,SP,#36   ; r2 =@CD r2 apunta
                                                             a la memoria que h
                                                            emos hecho para las
                                                             variables locales,
                                                             en concreto a dond
                                                            e apunta sp+36 que 
                                                            lo que AB
  116 000000B8         
  117 000000B8 EB000022        bl               matrizNxN_multiplicar
  118 000000BC         
  119 000000BC         ;RECORDATORIO Resultado en SP+36(CD)
  120 000000BC         ;A PARTIR DE AQUI PODRIAMOS HACER USO DE R4-R7 YA QUE YA
                        NO NECESITAMOS LAS MATRICES ORIGINALES
  121 000000BC         
  122 000000BC         ;TRASPUESTA CD
  123 000000BC E28D0024        add              r0,SP,#36   ; r0 = @CD
  124 000000C0 E28D1048        add              r1,SP,#72   ; r1 = @Traspuesta
  125 000000C4         
  126 000000C4 EB00000D        bl               Trasponer
  127 000000C8         
  128 000000C8         ;RECORDATORIO Resultado en SP+72(CD TRASPUESTA)
  129 000000C8         
  130 000000C8         ;SUMA AB + CD traspuesta
  131 000000C8 E3A00000        mov              r0,#0
  132 000000CC E3A04009        LDR              r4,=Tamanio ; r4 = N



ARM Macro Assembler    Page 4 


  133 000000D0 E1A0500D        mov              r5,SP       ; r5 = AB
  134 000000D4 E28D6048        add              r6,SP,#72   ; r6 = CD traspuest
                                                            a
  135 000000D8         
  136 000000D8 E2544001 
                       suma_ARM
                               subs             r4,r4,#1    ; r4(N)--
  137 000000DC 4A000006        bmi              fin_suma_ARM
  138 000000E0 E7957104        ldr              r7,[r5,r4,LSL #2] ; r7 = AB[r4]
                                                            
  139 000000E4 E7968104        ldr              r8,[r6,r4,LSL #2] ; r8 = CD[r4]
                                                            
  140 000000E8 E0888007        add              r8,r8,r7    ; r8=r8+r7
  141 000000EC E3580000        cmp              r8,#0
  142 000000F0 12800001        addne            r0,r0,#1    ; r0++ = terminos n
                                                            o cero++
  143 000000F4 E7898104        str              r8,[r9,r4,LSL #2] ; Resultado_E
                                                            [r4] = r8
  144 000000F8 EAFFFFF6        b                suma_ARM
  145 000000FC         fin_suma_ARM
  146 000000FC         
  147 000000FC         ;RESULTADOS NO CERO
  148 000000FC         
  149 000000FC         
  150 000000FC E91BAFF0        LDMDB            FP, {r4-r10,FP,SP,PC}
  151 00000100         
  152 00000100         
  153 00000100         
  154 00000100         ;-------------------------------------------------------
                       ------------SUBRUTINAS----------------------------------
                       ------------------------------------
  155 00000100         
  156 00000100         
  157 00000100         
  158 00000100         
  159 00000100         Trasponer
  160 00000100         
  161 00000100 E1A0C00D        MOV              IP, SP      ;PROLOGO
  162 00000104 E92DDFF0        STMDB            SP!, {r4-r10,FP,IP,LR,PC}
  163 00000108 E24CB004        SUB              FP, IP, #4
  164 0000010C         
  165 0000010C         
  166 0000010C         
  167 0000010C         
  168 0000010C E3A08003        LDR              r8, =N      ; r8 = N
  169 00000110 E1A06008        MOV              r6,r8       ; r6 = i
  170 00000114         
  171 00000114         bcl_i
  172 00000114 E2566001        subs             r6,r6,#1    ; i < N?
  173 00000118 4A000009        bmi              epilogo
  174 0000011C E1A07008        mov              r7,r8       ; r7 = j
  175 00000120         
  176 00000120         bcl_j
  177 00000120         
  178 00000120 E2577001        subs             r7,r7,#1    ; j < N?
  179 00000124 4AFFFFFA        bmi              bcl_i
  180 00000128 E0090896        mul              r9,r6,r8    ; r9 = i*N = r9
  181 0000012C E0899007        add              r9,r9,r7    ; r9 = i*N+j
  182 00000130 E790A109        ldr              r10,[r0,r9, LSL#2] 



ARM Macro Assembler    Page 5 


                                                            ; r10 = CD[i][j]
  183 00000134         
  184 00000134 E0090897        mul              r9,r7,r8    ; r9 = jN
  185 00000138 E0899006        add              r9,r9,r6    ; r9 = jN+i
  186 0000013C         
  187 0000013C E781A109        str              r10,[r1,r9, LSL #2] ; transpues
                                                            ta[j][i] = matriz [
                                                            i][j]
  188 00000140         
  189 00000140 EAFFFFF6        b                bcl_j
  190 00000144         
  191 00000144         
  192 00000144 E91BAFF0 
                       epilogo LDMDB            FP, {r4-r10,FP,SP,PC}
  193 00000148         
  194 00000148         
  195 00000148         
  196 00000148         matrizNxN_multiplicar
  197 00000148         
  198 00000148 E1A0C00D        MOV              IP, SP      ;PROLOGO
  199 0000014C E92DDFF0        STMDB            SP!, {r4-r10,FP,IP,LR,PC}
  200 00000150 E24CB004        SUB              FP, IP, #4
  201 00000154 E24DD004        SUB              SP,#4
  202 00000158         
  203 00000158         ; r0 = @A
  204 00000158         ; r1 = @B
  205 00000158         ; r2 = @Resultado
  206 00000158         ; SP = i
  207 00000158         ; SP+4= j
  208 00000158         ; SP+8= k
  209 00000158         
  210 00000158 E3A04003        LDR              r4,=N       ; r4 = i
  211 0000015C         
  212 0000015C         bucle_i
  213 0000015C E2544001        subs             r4,r4,#1    ; i--
  214 00000160 4A000016        bmi              epilogo2
  215 00000164 E3A05003        LDR              r5,=N       ; r5 = j
  216 00000168         
  217 00000168         bucle_j
  218 00000168 E2555001        subs             r5,r5,#1    ; j--
  219 0000016C 4AFFFFFA        bmi              bucle_i
  220 00000170         ; j < 0?
  221 00000170 E3A07003        LDR              r7,=N
  222 00000174 E0285794        mla              r8,r4,r7,r5 ; r8  = i*N + j =[i
                                                            ][j]
  223 00000178 E3A09000        mov              r9,#0
  224 0000017C E7829108        STR              r9,[r2,r8,LSL#2] ; Resultado[i]
                                                            [j] = 0 inicializac
                                                            iÃ³n del elemento
  225 00000180 E58D8000        STR              r8,[SP]     ; r8 como variable 
                                                            local
  226 00000184         
  227 00000184 E3A06003        LDR              r6,=N       ; r6 = k
  228 00000188         
  229 00000188 E2566001 
                       bucle_k subs             r6,r6,#1    ; k < N?
  230 0000018C 4AFFFFF5        bmi              bucle_j
  231 00000190         
  232 00000190         ; A[i][k] y B[k][j]



ARM Macro Assembler    Page 6 


  233 00000190         
  234 00000190 E3A07003        LDR              r7,=N       ; r7  = N
  235 00000194 E0286794        mla              r8,r4,r7,r6 ; r8  = i*N + K =[i
                                                            ][k]
  236 00000198 E0295796        mla              r9,r6,r7,r5 ; r9  = k*N + j =[k
                                                            ][j]
  237 0000019C         
  238 0000019C E790A108        LDR              r10,[r0,r8,LSL#2] 
                                                            ; r10 = A[i][k]
  239 000001A0 E1A0800A        MOV              r8,r10      ; r8  = A[i][k]
  240 000001A4 E791A109        LDR              r10,[r1,r9,LSL#2] 
                                                            ; r10 = B[k][j]
  241 000001A8         
  242 000001A8         ; A[i][k] * B[k][j]
  243 000001A8         
  244 000001A8 E0090A98        mul              r9,r8,r10   ; r9  = A[i][k] * B
                                                            [k][j]
  245 000001AC         
  246 000001AC         ;Resultado [i][j] = A[i][k] * B[k][j]
  247 000001AC         
  248 000001AC E59D8000        LDR              r8,[SP]     ; r8  = i*N + j =[i
                                                            ][j]
  249 000001B0 E7927108        LDR              r7,[r2,r8,LSL#2] ; r7 = Resulta
                                                            do[i][j]
  250 000001B4 E089A007        add              r10,r9,r7   ; r10 = Resultado[i
                                                            ][j] + A[i][k] * B[
                                                            k][j]
  251 000001B8 E782A108        STR              r10,[r2,r8,LSL#2] ; Resultado[i
                                                            ]][j] = Resultado[i
                                                            ][j] + A[i][k] * B[
                                                            k][j]
  252 000001BC         
  253 000001BC         
  254 000001BC EAFFFFF1        b                bucle_k
  255 000001C0         
  256 000001C0         
  257 000001C0         
  258 000001C0         
  259 000001C0 E91BAFF0 
                       epilogo2
                               LDMDB            FP, {r4-r10,FP,SP,PC}
  260 000001C4         
  261 000001C4         
  262 000001C4         
  263 000001C4                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\operar.d -o.\objects\operar.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM
\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --prede
fine="__UVISION_VERSION SETA 526" --list=.\listings\operar.lst operar.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

datos 00000000

Symbol: datos
   Definitions
      At line 2 in file operar.s
   Uses
      None
Comment: datos unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Trasponer 00000100

Symbol: Trasponer
   Definitions
      At line 159 in file operar.s
   Uses
      At line 61 in file operar.s
      At line 126 in file operar.s

bcl_i 00000114

Symbol: bcl_i
   Definitions
      At line 171 in file operar.s
   Uses
      At line 179 in file operar.s
Comment: bcl_i used once
bcl_j 00000120

Symbol: bcl_j
   Definitions
      At line 176 in file operar.s
   Uses
      At line 189 in file operar.s
Comment: bcl_j used once
bucle_i 0000015C

Symbol: bucle_i
   Definitions
      At line 212 in file operar.s
   Uses
      At line 219 in file operar.s
Comment: bucle_i used once
bucle_j 00000168

Symbol: bucle_j
   Definitions
      At line 217 in file operar.s
   Uses
      At line 230 in file operar.s
Comment: bucle_j used once
bucle_k 00000188

Symbol: bucle_k
   Definitions
      At line 229 in file operar.s
   Uses
      At line 254 in file operar.s
Comment: bucle_k used once
codigo 00000000

Symbol: codigo
   Definitions
      At line 10 in file operar.s
   Uses
      None
Comment: codigo unused
epilogo 00000144




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: epilogo
   Definitions
      At line 192 in file operar.s
   Uses
      At line 173 in file operar.s
Comment: epilogo used once
epilogo2 000001C0

Symbol: epilogo2
   Definitions
      At line 259 in file operar.s
   Uses
      At line 214 in file operar.s
Comment: epilogo2 used once
fin_suma 0000007C

Symbol: fin_suma
   Definitions
      At line 80 in file operar.s
   Uses
      At line 72 in file operar.s
Comment: fin_suma used once
fin_suma_ARM 000000FC

Symbol: fin_suma_ARM
   Definitions
      At line 145 in file operar.s
   Uses
      At line 137 in file operar.s
Comment: fin_suma_ARM used once
matriz3x3_operar_ARM 00000080

Symbol: matriz3x3_operar_ARM
   Definitions
      At line 89 in file operar.s
   Uses
      At line 13 in file operar.s
Comment: matriz3x3_operar_ARM used once
matriz3x3_operar_ARM_C 00000000

Symbol: matriz3x3_operar_ARM_C
   Definitions
      At line 20 in file operar.s
   Uses
      At line 12 in file operar.s
Comment: matriz3x3_operar_ARM_C used once
matrizNxN_multiplicar 00000148

Symbol: matrizNxN_multiplicar
   Definitions
      At line 196 in file operar.s
   Uses
      At line 107 in file operar.s
      At line 117 in file operar.s

suma 00000058

Symbol: suma
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 71 in file operar.s
   Uses
      At line 79 in file operar.s
Comment: suma used once
suma_ARM 000000D8

Symbol: suma_ARM
   Definitions
      At line 136 in file operar.s
   Uses
      At line 144 in file operar.s
Comment: suma_ARM used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

N 00000003

Symbol: N
   Definitions
      At line 4 in file operar.s
   Uses
      At line 5 in file operar.s
      At line 5 in file operar.s
      At line 168 in file operar.s
      At line 210 in file operar.s
      At line 215 in file operar.s
      At line 221 in file operar.s
      At line 227 in file operar.s
      At line 234 in file operar.s

Tamanio 00000009

Symbol: Tamanio
   Definitions
      At line 5 in file operar.s
   Uses
      At line 67 in file operar.s
      At line 132 in file operar.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

matrizNxN_multiplicar_C 00000000

Symbol: matrizNxN_multiplicar_C
   Definitions
      At line 14 in file operar.s
   Uses
      At line 42 in file operar.s
      At line 52 in file operar.s

1 symbol
352 symbols in table
