


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos, DATA
    2 00000000         
    3 00000000 00000003 
                       N       EQU              3
    4 00000000 00000009 
                       Tamanio EQU              N*N
    5 00000000         ;Test_A   DCD 1,0,0,0,1,0,0,0,1
    6 00000000         ;Test_B   DCD 9,8,7,6,5,4,3,2,1
    7 00000000         ;Resultado  SPACE N*N*4
    8 00000000         
    9 00000000                 AREA             codigo,CODE
   10 00000000         
   11 00000000                 EXPORT           matriz3x3_operar_THB
   12 00000000                 PRESERVE8        {TRUE}
   13 00000000         
   14 00000000         ; Función que recibe 4 matrices como parámetro, calcula 
                       Resultado = A*B + transpuesta(C*D) y devuelve el número 
                       de términos distintos de cero en el Resultado
   15 00000000         ; ayudándose de la función Multiplicar que calcula A*B y
                        C*D de NxN y de la función Transponer que calcula trans
                       puesta(C*D) 
   16 00000000         
   17 00000000                 ARM
   18 00000000         matriz3x3_operar_THB
   19 00000000         
   20 00000000 E1A0C00D        MOV              IP, SP      ;PROLOGO
   21 00000004 E92DDFF0        STMDB            SP!, {r4-r10,FP,IP,LR,PC}
   22 00000008 E24CB004        SUB              FP, IP, #4
   23 0000000C E24DD070        SUB              SP, #112
   24 00000010         
   25 00000010 E1A04000        MOV              r4,r0       ; r4 = @Test_a
   26 00000014 E1A05001        MOV              r5,r1       ; r5 = @Test_b
   27 00000018 E1A06002        MOV              r6,r2       ; r6 = @Test_c
   28 0000001C E1A07003        MOV              r7,r3       ; r7 = @Test_d
   29 00000020 E59C9000        LDR              r9,[IP]     ; r9 = IP = @Result
                                                            ados_E
   30 00000024 E58DE070        STR              lr,[r13,#112] ; Guardamos como 
                                                            variable local el v
                                                            alor del link regis
                                                            ter   
   31 00000028         
   32 00000028         ;A*B
   33 00000028         ; Parametros multiplicar A*B
   34 00000028 E1A0200D        MOV              r2,SP       ; r2 =@AB r2 apunta
                                                             a la memoria que h
                                                            emos hecho para las
                                                             variables locales,
                                                             en concreto a dond
                                                            e apunta sp
   35 0000002C         
   36 0000002C E28F809B        ADR              r8,Multiplicar+1
   37 00000030 E1A0E00F        MOV              lr,pc       ; OBLIGATORIO, se g
                                                            uarda el lr al que 
                                                            vamos a volver
   38 00000034 E12FFF18        bx               r8
   39 00000038         ;C*D
   40 00000038         ;Parametros multiplicar C*D
   41 00000038 E1A00006        MOV              r0,r6       ; r0 = @Test_c
   42 0000003C E1A01007        MOV              r1,r7       ; r1 = @Test_d



ARM Macro Assembler    Page 2 


   43 00000040 E28D2024        ADD              r2,SP,#36   ; r2 =@CD r2 apunta
                                                             a la memoria que h
                                                            emos hecho para las
                                                             variables locales,
                                                             en concreto a dond
                                                            e apunta sp+36 que 
                                                            lo que AB
   44 00000044         
   45 00000044 E28F8083        ADR              r8,Multiplicar+1
   46 00000048 E1A0E00F        MOV              lr,pc
   47 0000004C E12FFF18        bx               r8
   48 00000050         
   49 00000050         
   50 00000050         ;CD(Traspuesta)
   51 00000050 E28D0024        ADD              r0,SP,#36   ; r0 = @CD
   52 00000054 E28D1048        ADD              r1,SP,#72   ; r1 = @Traspuesta
   53 00000058         
   54 00000058 E28F8041        ADR              r8,Trasponer+1
   55 0000005C E1A0E00F        MOV              lr,pc       ; Guardamos el punt
                                                            o de retorno
   56 00000060 E12FFF18        bx               r8
   57 00000064         
   58 00000064         
   59 00000064         ;SUMA AB + CD traspuesta
   60 00000064 E3A00000        mov              r0,#0
   61 00000068 E3A04009        LDR              r4,=Tamanio ; r4 = N
   62 0000006C E1A0500D        mov              r5,SP       ; r5 = AB
   63 00000070 E28D6048        add              r6,SP,#72   ; r6 = CD traspuest
                                                            a
   64 00000074         
   65 00000074 E2544001 
                       suma    subs             r4,r4,#1    ; r4(N)--
   66 00000078 4A000006        bmi              fin_suma
   67 0000007C E7957104        ldr              r7,[r5,r4,LSL #2] ; r7 = AB[r4]
                                                            
   68 00000080 E7968104        ldr              r8,[r6,r4,LSL #2] ; r8 = CD[r4]
                                                            
   69 00000084 E0888007        add              r8,r8,r7    ; r8=r8+r7
   70 00000088 E3580000        cmp              r8,#0
   71 0000008C 12800001        addne            r0,r0,#1    ; r0++ = terminos n
                                                            o cero++
   72 00000090 E7898104        str              r8,[r9,r4,LSL #2] ; Resultado_E
                                                            [r4] = r8
   73 00000094 EAFFFFF6        b                suma
   74 00000098         fin_suma
   75 00000098         
   76 00000098         
   77 00000098 E59DE070        LDR              lr,[r13,#112] ; Recuperamos el 
                                                            valor del lr anteri
                                                            or
   78 0000009C         
   79 0000009C E91BAFF0        LDMDB            FP, {r4-r10,FP,SP,PC}
   80 000000A0         
   81 000000A0         ;-------------------------------------------------------
                       ------------SUBRUTINAS----------------------------------
                       ------------------------------------
   82 000000A0         ; Procedimiento que recibe una matriz de tipo entero com
                       o parámetro y carga en matriz Traspuesta el resultado 
   83 000000A0         ; de trasponer la matriz pasada como parámetro.



ARM Macro Assembler    Page 3 


   84 000000A0         ; En r2 se utiliza la N, en r3 el índice i, en r4 el índ
                       ice j, en r5 transpuesta[j][i] y en r6 CD[i][j].
   85 000000A0         
   86 000000A0                 THUMB
   87 000000A0         Trasponer
   88 000000A0 46F4            MOV              IP,lr
   89 000000A2 B470            STMDB            R13!, {r4-r6}
   90 000000A4         
   91 000000A4 4A1E            LDR              r2, =N      ; r2 = N
   92 000000A6 0013            MOVS             r3,r2       ; r3 = i
   93 000000A8         
   94 000000A8         bcl_i
   95 000000A8 1E5B            SUBS             r3,r3,#1    ; i < N?
   96 000000AA D40D            bmi              epilogo
   97 000000AC 0014            MOVS             r4,r2       ; r4 = j
   98 000000AE         
   99 000000AE         bcl_j
  100 000000AE 1E64            SUBS             r4,r4,#1    ; j < N?
  101 000000B0 D4FA            bmi              bcl_i
  102 000000B2         
  103 000000B2 0015            MOVS             r5,r2       ; r5 = N 
  104 000000B4 435D            MULS             r5,r3,r5    ; r5 = i*N 
  105 000000B6 192D            ADDS             r5,r5,r4    ; r5 = i*N+j
  106 000000B8 00AD            LSLS             r5,r5,#2
  107 000000BA 5946            LDR              r6,[r0,r5]  ; r6 = CD[i][j]
  108 000000BC         
  109 000000BC 0015            MOVS             r5,r2       ; r5 = N 
  110 000000BE 4365            MULS             r5,r4,r5    ; r5 = j*N 
  111 000000C0 18ED            ADDS             r5,r5,r3    ; r5 = j*N+i
  112 000000C2 00AD            LSLS             r5,r5,#2
  113 000000C4 514E            STR              r6,[r1,r5]  ; Traspuesta [j][i]
                                                             = r6 = CD[i][j]
  114 000000C6         
  115 000000C6 E7F2            B                bcl_j
  116 000000C8         
  117 000000C8         epilogo
  118 000000C8 46E6            MOV              lr,IP
  119 000000CA BC70            LDMIA            R13!, {r4-r6}
  120 000000CC 4770            bx               lr
  121 000000CE         
  122 000000CE         
  123 000000CE         
  124 000000CE         
  125 000000CE         ;-------------------------------------------------------
                       ------------------------------          
  126 000000CE         ; Procedimiento que recibe dos matrices de tipo entero c
                       omo parámetro y carga en la matriz Resultado
  127 000000CE         ; la matriz originada de realizar la multiplicación de l
                       as dos matrices recibidas como parámetro.
  128 000000CE         ; En r4 se utiliza el índice i, en r5 el índice j, en r6
                        EL índice k 
  129 000000CE         
  130 000000CE                 THUMB
  131 000000CE         Multiplicar
  132 000000CE 46F4            MOV              IP,lr       ; Guardamos en IP e
                                                            l valor del lr
  133 000000D0 B4F0            STMDB            R13!, {r4-r7} ; No se guarda lr
                                                             porque luego volve
                                                            mos con bx y no con



ARM Macro Assembler    Page 4 


                                                             "pop" pc
  134 000000D2         
  135 000000D2         ; r0 = @A
  136 000000D2         ; r1 = @B
  137 000000D2         ; r2 = @Resultado
  138 000000D2         
  139 000000D2         
  140 000000D2 4C13            LDR              r4,=N       ; r4 = i
  141 000000D4         
  142 000000D4         bucle_i
  143 000000D4 1E64            subs             r4,r4,#1    ; i--
  144 000000D6 D420            bmi              epilogo2
  145 000000D8 4D11            LDR              r5,=N       ; r5 = j
  146 000000DA         
  147 000000DA         bucle_j
  148 000000DA 1E6D            subs             r5,r5,#1    ; j--
  149 000000DC D4FA            bmi              bucle_i
  150 000000DE         ; j < 0?
  151 000000DE 4F10            LDR              r7,=N
  152 000000E0 4367            MULS             r7,r4,r7    ; r7 = i*N + j =[i]
                                                            [j]
  153 000000E2 197F            ADDS             r7,r5
  154 000000E4 00BF            LSLS             r7,r7,#2
  155 000000E6 2300            MOVS             r3,#0       ; r3 = 0
  156 000000E8 51D3            STR              r3,[r2,r7]  ; Resultado[i][j] =
                                                             0 inicialización d
                                                            el elemento
  157 000000EA 9700            STR              r7,[SP]     ; Guardamos r7(indi
                                                            ce [i][j]) como var
                                                            iable local
  158 000000EC         
  159 000000EC 4E0C            LDR              r6,=N       ; r6 = k
  160 000000EE         
  161 000000EE 1E76    bucle_k subs             r6,r6,#1    ; k < N?
  162 000000F0 D4F3            bmi              bucle_j
  163 000000F2         
  164 000000F2         ; A[i][k] y B[k][j]
  165 000000F2         
  166 000000F2 4F0B            LDR              r7,=N       ; r7  = N
  167 000000F4         ;mla r8,r4,r7,r6           ; r8  = i*N + K =[i][k]
  168 000000F4 4367            MULS             r7,r4,r7    ; r7 = i*N + j =[i]
                                                            [j]
  169 000000F6 19BF            ADDS             r7,r6
  170 000000F8 00BF            LSLS             r7,r7,#2
  171 000000FA 59C3            LDR              r3,[r0,r7]  ; r3  = A[i][k]
  172 000000FC 4698            MOV              r8,r3       ; r8  = A[i][k]
  173 000000FE         
  174 000000FE 4F08            LDR              r7,=N
  175 00000100         ;mla r9,r6,r7,r5     ; r9  = k*N + j =[k][j]
  176 00000100 4377            MULS             r7,r6,r7    ; r7 = i*N + j =[i]
                                                            [j]
  177 00000102 197F            ADDS             r7,r5
  178 00000104 00BF            LSLS             r7,r7,#2
  179 00000106 59CB            LDR              r3,[r1,r7]  ; r3 = B[k][j]
  180 00000108 4647            MOV              r7,r8       ; r7 = A[i][k]
  181 0000010A         
  182 0000010A         ; A[i][k] * B[k][j]
  183 0000010A         
  184 0000010A 437B            MULS             r3,r7,r3    ; r3  = A[i][k] * B



ARM Macro Assembler    Page 5 


                                                            [k][j]
  185 0000010C         
  186 0000010C         
  187 0000010C         ;Resultado [i][j] = A[i][k] * B[k][j]
  188 0000010C         
  189 0000010C 9F00            LDR              r7,[SP]     ; r7  = i*N + j =[i
                                                            ][j]
  190 0000010E 46B8            MOV              r8,r7       ; r8 =[i][j] 
  191 00000110 59D7            LDR              r7,[r2,r7]  ; r7 = Resultado[i]
                                                            [j]
  192 00000112 19DB            ADDS             r3,r7       ; r3 = Resultado[i]
                                                            [j] + A[i][k] * B[k
                                                            ][j]
  193 00000114 4647            MOV              r7,r8
  194 00000116 51D3            STR              r3,[r2,r7]  ; Resultado[i]][j] 
                                                            = Resultado[i][j] +
                                                             A[i][k] * B[k][j]
  195 00000118         
  196 00000118         
  197 00000118 E7E9            b                bucle_k
  198 0000011A         
  199 0000011A         
  200 0000011A         epilogo2
  201 0000011A 46E6            MOV              lr,IP       ; Recuperamos el va
                                                            lor de lr 
  202 0000011C BCF0            LDMIA            R13!,{r4-r7} ; Desapilamos y re
                                                            stauramos la pila  
                                                              
  203 0000011E 4770            bx               lr          ; salto con cambio 
                                                            de modo, apunte -> 
                                                            igual se puede pone
                                                            r ip en el salto
  204 00000120         
  205 00000120                 END
              00000003 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\thumb_code.d -o.\objects\thumb_code.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Kei
l_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1"
 --predefine="__UVISION_VERSION SETA 526" --list=.\listings\thumb_code.lst Thum
b_code.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

datos 00000000

Symbol: datos
   Definitions
      At line 1 in file Thumb_code.s
   Uses
      None
Comment: datos unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Multiplicar 000000CE

Symbol: Multiplicar
   Definitions
      At line 131 in file Thumb_code.s
   Uses
      At line 36 in file Thumb_code.s
      At line 45 in file Thumb_code.s

Trasponer 000000A0

Symbol: Trasponer
   Definitions
      At line 87 in file Thumb_code.s
   Uses
      At line 54 in file Thumb_code.s
Comment: Trasponer used once
bcl_i 000000A8

Symbol: bcl_i
   Definitions
      At line 94 in file Thumb_code.s
   Uses
      At line 101 in file Thumb_code.s
Comment: bcl_i used once
bcl_j 000000AE

Symbol: bcl_j
   Definitions
      At line 99 in file Thumb_code.s
   Uses
      At line 115 in file Thumb_code.s
Comment: bcl_j used once
bucle_i 000000D4

Symbol: bucle_i
   Definitions
      At line 142 in file Thumb_code.s
   Uses
      At line 149 in file Thumb_code.s
Comment: bucle_i used once
bucle_j 000000DA

Symbol: bucle_j
   Definitions
      At line 147 in file Thumb_code.s
   Uses
      At line 162 in file Thumb_code.s
Comment: bucle_j used once
bucle_k 000000EE

Symbol: bucle_k
   Definitions
      At line 161 in file Thumb_code.s
   Uses
      At line 197 in file Thumb_code.s
Comment: bucle_k used once
codigo 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: codigo
   Definitions
      At line 9 in file Thumb_code.s
   Uses
      None
Comment: codigo unused
epilogo 000000C8

Symbol: epilogo
   Definitions
      At line 117 in file Thumb_code.s
   Uses
      At line 96 in file Thumb_code.s
Comment: epilogo used once
epilogo2 0000011A

Symbol: epilogo2
   Definitions
      At line 200 in file Thumb_code.s
   Uses
      At line 144 in file Thumb_code.s
Comment: epilogo2 used once
fin_suma 00000098

Symbol: fin_suma
   Definitions
      At line 74 in file Thumb_code.s
   Uses
      At line 66 in file Thumb_code.s
Comment: fin_suma used once
matriz3x3_operar_THB 00000000

Symbol: matriz3x3_operar_THB
   Definitions
      At line 18 in file Thumb_code.s
   Uses
      At line 11 in file Thumb_code.s
Comment: matriz3x3_operar_THB used once
suma 00000074

Symbol: suma
   Definitions
      At line 65 in file Thumb_code.s
   Uses
      At line 73 in file Thumb_code.s
Comment: suma used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

N 00000003

Symbol: N
   Definitions
      At line 3 in file Thumb_code.s
   Uses
      At line 4 in file Thumb_code.s
      At line 4 in file Thumb_code.s
      At line 91 in file Thumb_code.s
      At line 140 in file Thumb_code.s
      At line 145 in file Thumb_code.s
      At line 151 in file Thumb_code.s
      At line 159 in file Thumb_code.s
      At line 166 in file Thumb_code.s
      At line 174 in file Thumb_code.s

Tamanio 00000009

Symbol: Tamanio
   Definitions
      At line 4 in file Thumb_code.s
   Uses
      At line 61 in file Thumb_code.s
Comment: Tamanio used once
2 symbols
350 symbols in table
