// fuentes Proyecto Hardware 2024
// version 0.1

#include "matriz_3x3.h"
#include <stdio.h>


    // Inicializaci n de matrices usando el tipo de datos Matriz3x3
static int Test_A[N][N] = {
		{1, 0, 0},
		{0, 1, 0},
		{0, 0, 1}
	};

static int Test_B[N][N] = {
		{9, 8, 7},
		{6, 5, 4},
		{3, 2, 1}
	};

		
/* *****************************************************************************
 * declaraci n funciones internas 
 */
		
// funcion que ejecuta las distintas versiones de la implementacion en C, ARM y Thumb y verifica que dan el mismo resultado.
// recibe las matrices con las que operar
// devuelve si todas las versiones coinciden en el numero de terminos_no_cero o no y el resultado de la opoeraci n.
uint8_t matrizNxN_verificar(int A[N][N], int B[N][N], int C[N][N], int D[N][N], int Resultado[N][N]);

//TODO ???	
void matrizNxN_transponer(int A[N][N],int Traspuesta[N][N]){
	for(int fila = 0; fila < N; fila++){
		for(int columna = 0; columna < N; columna++){

			Traspuesta[columna][fila] = A[fila][columna];
			
		}
	}

}
		

/* *****************************************************************************
 * IMPLEMENTACIONES 
 */
		
void matrizNxN_multiplicar_C(int A[N][N], int B[N][N], int Resultado[N][N]){

    int suma,fila = 0,columna = 0;
	while(fila < 3){
		
		suma = 0;
		for(int j = 0; j < N; j++){
			
			suma += A[fila][j] * B[j][columna];
			
		}

		Resultado[fila][columna] = suma;

		if(columna == 2){
			columna = 0;
			fila++;
		}else{ 
			columna++;
		}
		}
}


//funcion que calcula Resultado = A*B + transpuesta(C*D) y devuelva el numero de terminos distintos de cero en el Resultado
//ayudandose de funcion matrizNxN_multiplicar_C que calcula A*B de NxN
uint8_t matrizNxN_operar_C(int A[N][N], int B[N][N], int C[N][N], int D[N][N], int Resultado[N][N]){
	uint8_t terminos_no_cero = 0;
	int AB[N][N],CD[N][N],Traspuesta[N][N];
	matrizNxN_multiplicar_C(A, B, AB);//AB = A*B

	matrizNxN_multiplicar_C(C, D, CD);//CD = C*D
	
	//TRASPONER CD
	matrizNxN_transponer(CD,Traspuesta);
	
	//SUMAR CD TRASPUESTA + AB
	for (int i = 0; i <N ; i++){
		for (int j = 0; j < N; j++)
		{
			if((Resultado[i][j] = (AB[i][j] + Traspuesta[i][j])) != 0){
				//RESULTADOS NO CERO	
				terminos_no_cero++;
			}
		}
			
	}
	
	return terminos_no_cero;
}
		
uint8_t matrizNxN_verificar(int A[N][N], int B[N][N], int C[N][N], int D[N][N], int Resultado[N][N]){
	uint8_t terminos_no_cero_C;
	uint8_t terminos_no_cero_ARM_C;
	uint8_t terminos_no_cero_ARM;
	uint8_t terminos_no_cero_THB;
	uint8_t resultado;
	
	terminos_no_cero_C = matrizNxN_operar_C(A, B, C, D, Resultado);
	terminos_no_cero_ARM_C = matriz3x3_operar_ARM_C(A,B,C,D,Resultado);
	terminos_no_cero_ARM = matriz3x3_operar_ARM(A,B,C,D,Resultado);
	terminos_no_cero_THB = matriz3x3_operar_THB(A,B,C,D,Resultado);	
	//TODO llamar al resto de implementaciones en ensamblador
	resultado = (terminos_no_cero_C == terminos_no_cero_ARM_C) && (terminos_no_cero_C == terminos_no_cero_ARM) && (terminos_no_cero_C == terminos_no_cero_ARM) && (terminos_no_cero_C == terminos_no_cero_THB);
	//TODO resultado = (terminos_no_cero_C ! = al resto....
	return resultado;
}



// MAIN 
 int main (void) {
	
	int Resultado_E[N][N];
	int error;

	int Test_C[N][N]  = {
		{1, 0, 2},
		{0, 1, 2},
		{2, 0, 1}
	};

	int Test_D[N][N]  = {
		{2, 1, 0},
		{1, 2, 0},
		{0, 0, 2}
	};
	


	error = matrizNxN_verificar(Test_A, Test_B, Test_C, Test_D, Resultado_E);
	if(error == 0){
		return(-1);
	}
	
	while(1);
	
}

/**
 *@}
 **/


;-------------------------------------------------------------ARM---------------------------------------------------------------------------------------------------------------------




	AREA datos, DATA
	
N 			EQU 3
Tamanio		EQU N*N
;Test_A 		DCD 1,0,0,0,1,0,0,0,1
;Test_B 		DCD 9,8,7,6,5,4,3,2,1
;Resultado 	SPACE N*N*4

	AREA codigo,CODE
			
			EXPORT matriz3x3_operar_ARM_C
			EXPORT matriz3x3_operar_ARM
			IMPORT matrizNxN_multiplicar_C
			
			PRESERVE8 {TRUE}
			
	

matriz3x3_operar_ARM_C

			MOV IP, SP								;PROLOGO
			STMDB SP!, {r4-r10,FP,IP,LR,PC}
			SUB FP, IP, #4
			SUB SP, #108							;Hacemos espacio en la pila para las variables locales, 2 matrices 3x3 108=9*4*3
			; r0 = Test_A
			; r1 = Test_B
			; r2 = Test_C
			; r3 = Test_D	
			; RESULTADO_E?¿?¿?¿ deberia estar en la pila al ser el 5 parametro pero no lo encuentro
	;SALVAGUARDA DE LAS MEMORIAS DE LAS MATRICES Y MULTIPLICACIÓN DE A*B
			
			MOV r4,r0 							; r4 = @Test_a
			MOV r5,r1 							; r5 = @Test_b
			MOV r6,r2 							; r6 = @Test_c
			MOV r7,r3 							; r7 = @Test_d
			LDR r9,[IP]							; r9 = IP = @Resultados_E
	
			MOV r2,SP						 	; r2 =@AB r2 apunta a la memoria que hemos hecho para las variables locales, en concreto a donde apunta sp
			
			
 			bl matrizNxN_multiplicar_C
			
			;RECORDATORIO Resultado en SP(AB)
			
	;PONEMOS LOS PARAMETROS PARA LLAMAR A MULTPLICAR_C OTRA VEZ PARA HACER C*D
	
			mov r0,r6							; r0 = @Test_c
			mov r1,r7							; r1 = @Test_d
			ADD r2,SP,#36						; r2 =@CD r2 apunta a la memoria que hemos hecho para las variables locales, en concreto a donde apunta sp+36 que lo que AB
			
			bl matrizNxN_multiplicar_C
			
			;RECORDATORIO Resultado en SP+36(CD)
			;A PARTIR DE AQUI PODRIAMOS HACER USO DE R4-R7 YA QUE YA NO NECESITAMOS LAS MATRICES ORIGINALES

			;TRASPUESTA CD
			add r0,SP,#36						; r0 = @CD
			add r1,SP,#72						; r1 = @Traspuesta
			
			bl Trasponer
			
			;RECORDATORIO Resultado en SP+72(CD TRASPUESTA)
			
			;SUMA AB + CD traspuesta
			mov r0,#0
			LDR r4,=Tamanio						; r4 = N
			mov r5,SP							; r5 = AB
			add r6,SP,#72						; r6 = CD traspuesta
			
suma		subs r4,r4,#1						; r4(N)--
			bmi fin_suma
			ldr r7,[r5,r4,LSL #2]				; r7 = AB[r4]
			ldr r8,[r6,r4,LSL #2]				; r8 = CD[r4]
			add r8,r8,r7						; r8=r8+r7
			cmp r8,#0
			addne r0,r0,#1						; r0++ = terminos no cero++
			str r8,[r9,r4,LSL #2]				; Resultado_E[r4] = r8
			b suma
fin_suma

			;RESULTADOS NO CERO
			
			
			LDMDB FP, {r4-r10,FP,SP,PC}	



matriz3x3_operar_ARM

			MOV IP, SP								;PROLOGO
			STMDB SP!, {r4-r10,FP,IP,LR,PC}
			SUB FP, IP, #4
			SUB SP, #108							;Hacemos espacio en la pila para las variables locales, 2 matrices 3x3 108=9*4*3


			
			MOV r4,r0 							; r4 = @Test_a
			MOV r5,r1 							; r5 = @Test_b
			MOV r6,r2 							; r6 = @Test_c
			MOV r7,r3 							; r7 = @Test_d
			LDR r9,[IP]							; r9 = IP = @Resultados_E
	
			MOV r2,SP						 	; r2 =@AB r2 apunta a la memoria que hemos hecho para las variables locales, en concreto a donde apunta sp
			
			
 			bl matrizNxN_multiplicar
			
			;RECORDATORIO Resultado en SP(AB)
			
	;PONEMOS LOS PARAMETROS PARA LLAMAR A MULTPLICAR_C OTRA VEZ PARA HACER C*D
	
			mov r0,r6							; r0 = @Test_c
			mov r1,r7							; r1 = @Test_d
			ADD r2,SP,#36						; r2 =@CD r2 apunta a la memoria que hemos hecho para las variables locales, en concreto a donde apunta sp+36 que lo que AB
			
			bl matrizNxN_multiplicar
			
			;RECORDATORIO Resultado en SP+36(CD)
			;A PARTIR DE AQUI PODRIAMOS HACER USO DE R4-R7 YA QUE YA NO NECESITAMOS LAS MATRICES ORIGINALES

			;TRASPUESTA CD
			add r0,SP,#36						; r0 = @CD
			add r1,SP,#72						; r1 = @Traspuesta
			
			bl Trasponer
			
			;RECORDATORIO Resultado en SP+72(CD TRASPUESTA)
			
			;SUMA AB + CD traspuesta
			mov r0,#0
			LDR r4,=Tamanio						; r4 = N
			mov r5,SP							; r5 = AB
			add r6,SP,#72						; r6 = CD traspuesta
			
suma_ARM	subs r4,r4,#1						; r4(N)--
			bmi fin_suma_ARM
			ldr r7,[r5,r4,LSL #2]				; r7 = AB[r4]
			ldr r8,[r6,r4,LSL #2]				; r8 = CD[r4]
			add r8,r8,r7						; r8=r8+r7
			cmp r8,#0
			addne r0,r0,#1						; r0++ = terminos no cero++
			str r8,[r9,r4,LSL #2]				; Resultado_E[r4] = r8
			b suma_ARM
fin_suma_ARM

			;RESULTADOS NO CERO
			
			
			LDMDB FP, {r4-r10,FP,SP,PC}	



;-------------------------------------------------------------------SUBRUTINAS----------------------------------------------------------------------
												



Trasponer
				
			MOV IP, SP						;PROLOGO
			STMDB SP!, {r4-r10,FP,IP,LR,PC}
			SUB FP, IP, #4
					
			
		
			
			LDR r8, =N					; r8 = N
			MOV r6,r8					; r6 = i
				
bcl_i
			subs r6,r6,#1           	; i < N?
			bmi epilogo
			mov r7,r8          			 ; r7 = j

bcl_j
			
			subs r7,r7,#1           		; j < N?
			bmi bcl_i
			mul r9,r6,r8        		; r9 = i*N = r9
			add r9,r9,r7        		; r9 = i*N+j
			ldr r10,[r0,r9, LSL#2]     	; r10 = CD[i][j]
			
			mul r9,r7,r8        		; r9 = jN
			add r9,r9,r6        		; r9 = jN+i
			
			str r10,[r1,r9, LSL #2]     ; transpuesta[j][i] = matriz [i][j]
			
			b bcl_j
	

epilogo 	LDMDB FP, {r4-r10,FP,SP,PC}	



matrizNxN_multiplicar
		
			MOV IP, SP								;PROLOGO
			STMDB SP!, {r4-r10,FP,IP,LR,PC}
			SUB FP, IP, #4
			SUB SP,#4
			
			; r0 = @A
			; r1 = @B
			; r2 = @Resultado
			; SP = i
			; SP+4= j
			; SP+8= k
			
			LDR r4,=N							; r4 = i
			
bucle_i
			subs r4,r4,#1         		 	 	; i--
			bmi epilogo2
			LDR r5,=N          			 		; r5 = j
			
bucle_j
			subs r5,r5,#1         		  		; j--
			bmi bucle_i	
												; j < 0?
			LDR r7,=N
			mla r8,r4,r7,r5						; r8  = i*N + j =[i][j]
			mov r9,#0
			STR r9,[r2,r8,LSL#2]				; Resultado[i][j] = 0 inicialización del elemento
			STR r8,[SP]							; r8 como variable local

			LDR r6,=N							; r6 = k
			
bucle_k		subs r6,r6,#1						; k < N?
			bmi bucle_j
			
		; A[i][k] y B[k][j]

			LDR r7,=N					; r7  = N
			mla r8,r4,r7,r6        		; r8  = i*N + K =[i][k]
			mla r9,r6,r7,r5				; r9  = k*N + j =[k][j]

			LDR r10,[r0,r8,LSL#2]		; r10 = A[i][k]
			MOV r8,r10					; r8  = A[i][k]
			LDR r10,[r1,r9,LSL#2]		; r10 = B[k][j]
			
		; A[i][k] * B[k][j]

			mul r9,r8,r10				; r9  = A[i][k] * B[k][j]
			
		;Resultado [i][j] = A[i][k] * B[k][j]

			LDR r8,[SP]					; r8  = i*N + j =[i][j]
			LDR r7,[r2,r8,LSL#2]		; r7 = Resultado[i][j]
			add r10,r9,r7				; r10 = Resultado[i][j] + A[i][k] * B[k][j]
			STR r10,[r2,r8,LSL#2]		; Resultado[i]][j] = Resultado[i][j] + A[i][k] * B[k][j]
			

			b bucle_k	
			
			
			

epilogo2 	LDMDB FP, {r4-r10,FP,SP,PC}



	END

;----------------------------------------------------------------THUMB-------------------------------------------
	AREA datos, DATA
	
N 			EQU 3
Tamanio		EQU N*N
;Test_A 		DCD 1,0,0,0,1,0,0,0,1
;Test_B 		DCD 9,8,7,6,5,4,3,2,1
;Resultado 	SPACE N*N*4

	AREA codigo,CODE
		
		EXPORT matriz3x3_operar_THB
		PRESERVE8 {TRUE}
		
		ARM
matriz3x3_operar_THB

			MOV IP, SP								;PROLOGO
			STMDB SP!, {r4-r10,FP,IP,LR,PC}
			SUB FP, IP, #4
			SUB SP, #112
			
			MOV r4,r0 							; r4 = @Test_a
			MOV r5,r1 							; r5 = @Test_b
			MOV r6,r2 							; r6 = @Test_c
			MOV r7,r3 							; r7 = @Test_d
			LDR r9,[IP]							; r9 = IP = @Resultados_E
			STR lr,[r13,#112]					; Guardamos como variable local el valor del link register 		
		
		;A*B
			; Parametros multiplicar A*B
			MOV r2,SP						 	; r2 =@AB r2 apunta a la memoria que hemos hecho para las variables locales, en concreto a donde apunta sp
			
			ADR r8,Multiplicar+1
			MOV lr,pc							; OBLIGATORIO, se guarda el lr al que vamos a volver
 			bx r8
		;C*D
			;Parametros multiplicar C*D
			MOV r0,r6							; r0 = @Test_c
			MOV r1,r7							; r1 = @Test_d
			ADD r2,SP,#36						; r2 =@CD r2 apunta a la memoria que hemos hecho para las variables locales, en concreto a donde apunta sp+36 que lo que AB
			
			ADR r8,Multiplicar+1
			MOV lr,pc
			bx r8
			
				
		;CD(Traspuesta)
			ADD r0,SP,#36						; r0 = @CD
			ADD r1,SP,#72						; r1 = @Traspuesta
									
			ADR r8,Trasponer+1			
			MOV lr,pc							; Guardamos el punto de retorno
			bx r8
			
			
			;SUMA AB + CD traspuesta
			mov r0,#0
			LDR r4,=Tamanio						; r4 = N
			mov r5,SP							; r5 = AB
			add r6,SP,#72						; r6 = CD traspuesta
			
suma		subs r4,r4,#1						; r4(N)--
			bmi fin_suma
			ldr r7,[r5,r4,LSL #2]				; r7 = AB[r4]
			ldr r8,[r6,r4,LSL #2]				; r8 = CD[r4]
			add r8,r8,r7						; r8=r8+r7
			cmp r8,#0
			addne r0,r0,#1						; r0++ = terminos no cero++
			str r8,[r9,r4,LSL #2]				; Resultado_E[r4] = r8
			b suma
fin_suma
			
		
			LDR lr,[r13,#112]					; Recuperamos el valor del lr anterior
			
			LDMDB FP, {r4-r10,FP,SP,PC}	

;-------------------------------------------------------------------SUBRUTINAS----------------------------------------------------------------------
			
		THUMB
Trasponer	
			MOV IP,lr	
			STMDB R13!, {r3-r6}				
			
			LDR r2, =N							; r2 = N
			MOVS r3,r2							; r3 = i
				
bcl_i
			SUBS r3,r3,#1          		 		; i < N?
			bmi epilogo
			MOVS r4,r2          			 	; r4 = j

bcl_j
			SUBS r4,r4,#1          				; j < N?
			bmi bcl_i
			
			MOVS r5,r2							; r5 = N	
			MULS r5,r3,r5       				; r5 = i*N 
			ADDS r5,r5,r4        				; r5 = i*N+j
			LSLS r5,r5,#2
			LDR r6,[r0,r5]     					; r6 = CD[i][j]
			
			MOVS r5,r2							; r5 = N	
			MULS r5,r4,r5       				; r5 = j*N 
			ADDS r5,r5,r3        				; r5 = j*N+i
			LSLS r5,r5,#2
			STR r6,[r1,r5]						; Traspuesta [j][i] = r6 = CD[i][j]

			B bcl_j
			
epilogo 	
			MOV lr,IP
			LDMIA R13!, {r3-r6}
			bx lr
			 
			 
			 
			 
;-------------------------------------------------------------------------------------										

		THUMB
Multiplicar	
			MOV IP,lr							; Guardamos en IP el valor del lr
			STMDB R13!, {r0-r7}					; No se guarda lr porque luego volvemos con bx y no con "pop" pc
												
			; r0 = @A
			; r1 = @B
			; r2 = @Resultado
			
			
			LDR r4,=N							; r4 = i
			
bucle_i
			subs r4,r4,#1         		 	 	; i--
			bmi epilogo2
			LDR r5,=N          			 		; r5 = j
			
bucle_j
			subs r5,r5,#1         		  		; j--
			bmi bucle_i	
												; j < 0?
			LDR r7,=N
			MULS r7,r4,r7						; r7 = i*N + j =[i][j]
			ADDS r7,r5						
			LSLS r7,r7,#2
			MOVS r3,#0							; r3 = 0
			STR r3,[r2,r7]						; Resultado[i][j] = 0 inicializaci n del elemento
			STR r7,[SP]							; Guardamos r7(indice [i][j]) como variable local

			LDR r6,=N							; r6 = k
			
bucle_k		subs r6,r6,#1						; k < N?
			bmi bucle_j
			
		; A[i][k] y B[k][j]

			LDR r7,=N							; r7  = N
			;mla r8,r4,r7,r6        			; r8  = i*N + K =[i][k]
			MULS r7,r4,r7						; r7 = i*N + j =[i][j]
			ADDS r7,r6					
			LSLS r7,r7,#2
			LDR r3,[r0,r7]						; r3  = A[i][k]
			MOV r8,r3							; r8  = A[i][k]
			
			LDR r7,=N				
			;mla r9,r6,r7,r5					; r9  = k*N + j =[k][j]
			MULS r7,r6,r7						; r7 = i*N + j =[i][j]
			ADDS r7,r5					
			LSLS r7,r7,#2
			LDR r3,[r1,r7]						; r3 = B[k][j]
			MOV r7,r8							; r7 = A[i][k]
			
		; A[i][k] * B[k][j]

			MULS r3,r7,r3						; r3  = A[i][k] * B[k][j]
			
			
		;Resultado [i][j] = A[i][k] * B[k][j]

			LDR r7,[SP]							; r7  = i*N + j =[i][j]
			MOV r8,r7							; r8 =[i][j] 
			LDR r7,[r2,r7]						; r7 = Resultado[i][j]
			ADDS r3,r7				 			; r3 = Resultado[i][j] + A[i][k] * B[k][j]
			MOV r7,r8
			STR r3,[r2,r7]						; Resultado[i]][j] = Resultado[i][j] + A[i][k] * B[k][j]
			

			b bucle_k	
			
				
epilogo2 
			MOV lr,IP							; Recuperamos el valor de lr 
			LDMIA R13!,{r0-r7}					; Desapilamos y restauramos la pila				
			bx lr								; salto con cambio de modo, apunte -> igual se puede poner ip en el salto
		
	END
